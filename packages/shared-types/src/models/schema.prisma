// This is the shared Prisma schema file for ArtSign project
// Used by app-be for the main backend API

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USER MANAGEMENT ====================

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  password               String
  firstName              String
  lastName               String
  phone                  String?
  role                   Role      @default(CUSTOMER)
  status                 UserStatus @default(PENDING_VERIFICATION)
  refreshToken           String?
  lastLoginAt            DateTime?
  emailVerificationToken String?
  emailVerifiedAt        DateTime?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  
  // Profile fields
  about                  String?
  dateOfBirth            DateTime?
  gender                 String?
  imageUrl               String?
  language               String?   @default("en")
  currency               String?   @default("USD")
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relations
  addresses              Address[]
  orders                 Order[]
  paymentMethods         PaymentMethod[]
  refundRequests         RefundRequest[]
  reviews                Review[]
  auditLogs              AuditLog[]
  quotations             Quotation[]
  invoices               Invoice[]

  @@index([email])
  @@index([role])
}

// ==================== CUSTOMER MANAGEMENT ====================

model Customer {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
  
  // Business fields
  companyName       String?
  taxId             String?
  customerType      CustomerType @default(INDIVIDUAL)
  
  // Financial
  creditLimit       Float     @default(0)
  creditUsed        Float     @default(0)
  totalSpent        Float     @default(0)
  paymentTerms      PaymentTerms @default(IMMEDIATE)
  
  // Contact
  contactPerson     String?
  salesman          String?
  
  // Status
  customerStatus    CustomerStatus @default(ACTIVE)
  notes             String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([customerType])
  @@index([customerStatus])
}

// ==================== PRODUCT MANAGEMENT ====================

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([slug])
}

model Product {
  id                       String    @id @default(cuid())
  name                     String
  description              String
  sku                      String?   @unique
  categoryId               String
  category                 Category  @relation(fields: [categoryId], references: [id])
  
  // Pricing
  price                    Float
  pricingModel             String    @default("fixed") // fixed, quantity-based, area-based, custom
  
  // Stock
  trackStock               Boolean   @default(false)
  currentStock             Int       @default(0)
  lowStockThreshold        Int       @default(10)
  
  // Status
  status                   ProductStatus @default(ACTIVE)
  featured                 Boolean   @default(false)
  
  // Media
  imageUrls                String[]
  
  // Specifications
  specifications           Json?     @default("{}")
  features                 Json      @default("[]")
  colorOptions             Json?     @default("[]")
  sizeOptions              Json?     @default("[]")
  
  // Metrics
  reviewsCount             Int       @default(0)
  averageRating            Float     @default(0)
  
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  
  // Relations
  orderItems               OrderItem[]
  reviews                  Review[]
  quotationItems           QuotationItem[]

  @@index([categoryId])
  @@index([sku])
  @@index([status])
}

// ==================== SERVICE MANAGEMENT ====================

model Service {
  id                     String    @id @default(cuid())
  title                  String
  slug                   String    @unique
  description            String
  price                  Float
  per                    String    // per unit, per sqft, etc
  category               ServiceCategory
  status                 ServiceStatus @default(ACTIVE)
  
  // Media
  imageUrl               String
  
  // Features
  features               String    @default("[]")
  isFeatured             Boolean   @default(false)
  
  // Ratings
  averageRating          Float?    @default(0)
  reviewsCount           Int       @default(0)
  ratingStats            Json?     @default("{}")
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  // Relations
  artworkRequirements    ArtworkRequirement[]
  serviceSpecifications  ServiceSpecification[]
  reviews                Review[]

  @@index([category])
  @@index([slug])
  @@index([status])
}

model ArtworkRequirement {
  id          String   @id @default(cuid())
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  title       String
  description String
  isRequired  Boolean  @default(true)
  exampleUrls String   @default("[]")
  fileTypes   String   @default("[\"jpg\", \"jpeg\", \"png\", \"pdf\", \"ai\", \"eps\", \"svg\"]")

  @@index([serviceId])
}

model ServiceSpecification {
  id          String   @id @default(cuid())
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  name        String
  description String?
  isRequired  Boolean  @default(false)
  options     String   @default("[]")

  @@index([serviceId])
}

// ==================== ORDER MANAGEMENT ====================

model Order {
  id                String    @id @default(cuid())
  orderNumber       String    @unique
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  
  // Status
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  
  // Amounts
  subtotal          Float
  taxAmount         Float     @default(0)
  shippingCost      Float     @default(0)
  discountAmount    Float     @default(0)
  totalAmount       Float
  
  // Shipping
  shippingMethod    ShippingMethod @default(STANDARD)
  trackingNumber    String?
  shippingAddressId String?
  shippingAddress   Address?  @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String?
  billingAddress    Address?  @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  
  // Payment
  paymentMethodId   String?
  paymentMethod     PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  
  // Other
  notes             String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  orderItems        OrderItem[]
  refundRequests    RefundRequest[]
  invoices          Invoice[]

  @@index([orderNumber])
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id              String    @id @default(cuid())
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id])
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  
  quantity        Int       @default(1)
  unitPrice       Float
  totalPrice      Float
  
  // Customization
  specifications  Json?     // Custom specifications for this order
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([orderId])
  @@index([productId])
}

// ==================== QUOTATION MANAGEMENT ====================

model Quotation {
  id              String    @id @default(cuid())
  quotationNumber String    @unique
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Details
  title           String
  description     String?
  salesman        String?
  
  // Status
  status          QuotationStatus @default(DRAFT)
  validUntil      DateTime
  
  // Amounts
  subtotal        Float
  taxAmount       Float     @default(0)
  totalAmount     Float
  
  // Notes
  notes           String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  items           QuotationItem[]

  @@index([quotationNumber])
  @@index([userId])
  @@index([status])
}

model QuotationItem {
  id              String    @id @default(cuid())
  quotationId     String
  quotation       Quotation @relation(fields: [quotationId], references: [id])
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  
  description     String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  specifications  Json?

  @@index([quotationId])
  @@index([productId])
}

// ==================== FINANCIAL MANAGEMENT ====================

model Invoice {
  id              String    @id @default(cuid())
  invoiceNumber   String    @unique
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id])
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Status
  status          InvoiceStatus @default(UNPAID)
  
  // Amounts
  amount          Float
  
  // Dates
  dueDate         DateTime
  paidDate        DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([invoiceNumber])
  @@index([orderId])
  @@index([userId])
  @@index([status])
}

model PaymentMethod {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Card details
  cardType        String
  lastFour        String
  expiryMonth     String
  expiryYear      String
  nameOnCard      String
  
  // Settings
  isDefault       Boolean   @default(false)
  billingAddress  String
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  orders          Order[]

  @@index([userId])
}

model RefundRequest {
  id              String    @id @default(cuid())
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id])
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Details
  products        Json      // Array of products to refund
  refundAmount    Float
  refundMethod    String
  refundCard      String?
  
  // Status
  status          RefundStatus @default(PENDING)
  
  // Notes
  reason          String
  additionalNote  String?
  adminNote       String?
  
  // Dates
  requestedAt     DateTime  @default(now())
  processedAt     DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([orderId])
  @@index([userId])
  @@index([status])
}

// ==================== USER GENERATED CONTENT ====================

model Review {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  productId  String?
  product    Product?  @relation(fields: [productId], references: [id])
  serviceId  String?
  service    Service?  @relation(fields: [serviceId], references: [id])
  
  // Content
  rating     Int       // 1-5
  comment    String
  
  // Metadata
  helpful    Int       @default(0)
  status     ReviewStatus @default(PENDING)
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([serviceId])
  @@index([status])
}

// ==================== ADDRESS MANAGEMENT ====================

model Address {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  // Address details
  name        String
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  
  // Settings
  isDefault   Boolean   @default(false)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  shippingOrders Order[] @relation("OrderShippingAddress")
  billingOrders  Order[] @relation("OrderBillingAddress")

  @@index([userId])
  @@index([isDefault])
}

// ==================== AUDIT & LOGGING ====================

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  entity    String
  entityId  String?
  changes   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([entity, entityId])
}

// ==================== ENUMS ====================

enum Role {
  CUSTOMER
  CONTRACTOR
  SALESMAN
  MANAGER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum CustomerType {
  INDIVIDUAL
  CORPORATE
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
}

enum PaymentTerms {
  IMMEDIATE
  NET_30
  NET_60
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum ServiceCategory {
  SIGNAGE
  BANNERS
  VEHICLE_WRAPS
  WINDOW_GRAPHICS
  PROMOTIONAL_ITEMS
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  COMING_SOON
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  NEXT_DAY
  PICKUP
}

enum QuotationStatus {
  DRAFT
  SENT
  PENDING
  APPROVED
  REJECTED
  ACCEPTED
  EXPIRED
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}